generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  password          String
  username              String
  profilePictureUrl String? // Optional profile picture
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  role              Role     @default(User)

  cards Card[]
}

model Card {
  id                       Int       @id @default(autoincrement())
  title                    String // Card title (e.g., user's name or custom title)
  bio                      String? // Short introduction or bio
  phoneNumbers             String[] // Array of phone numbers
  emails                   String[] // Array of email addresses
  addresses                String[] // Array of addresses
  jobTitle                 String? // User's job title
  companyName              String? // User's company name
  dateOfBirth              DateTime? // Optional date of birth
  personalSocialMediaLinks Json // Array of social media links
  companySocialMediaLink   String? // Company's social media link
  profileImageUrl          String? // Optional profile image URL
  templateType             String // Identifier for the template type
  uniqueUrl                String    @unique // Unique URL for sharing the card
  qrCodeUrl                String? // URL for QR code
  aboutUs                  String? // About Us section
  instagramVideoLink       String? // Instagram video link
  youtubeVideoLink         String? // YouTube video link
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  services        Service[] // Array of services provided
  testimonials    Testimonial[] // Array of testimonials
  SocialMediaLink SocialMediaLink[] // Social media links for the card
}
model Appointment {
  id            Int      @id @default(autoincrement())
  name          String
  phoneNumber   String
  email         String
  message       String
  createdAt     DateTime @default(now())
}

model Service {
  id         Int     @id @default(autoincrement())
  name       String // Name of the service
  imageUrl   String? // URL for the service image
  serviceUrl String? // URL for the service
  cardId     Int // Reference to the associated card
  card       Card    @relation(fields: [cardId], references: [id])
}

model Testimonial {
  id          Int     @id @default(autoincrement())
  authorName  String // Name of the person giving the testimonial
  content     String // Testimonial content
  imageUrl    String? // Optional image URL of the author
  designation String? // Author's designation
  cardId      Int // Reference to the associated card
  card        Card    @relation(fields: [cardId], references: [id])
}

model SocialMediaLink {
  id       Int                 @id @default(autoincrement())
  platform SocialMediaPlatform // Enum for platform type (e.g., LinkedIn, Twitter)
  iconUrl  String? // Optional icon URL for the platform
  url      String // URL of the social media
  cardId   Int? // Reference to the associated card
  card     Card?               @relation(fields: [cardId], references: [id])
}

model Company {
  id         Int      @id @default(autoincrement())
  name       String // Company name
  logoUrl    String? // URL of the company logo
  websiteUrl String? // Website URL of the company
  createdAt  DateTime @default(now())
}

enum SocialMediaPlatform {
  LINKEDIN
  TWITTER
  FACEBOOK
  INSTAGRAM
  YOUTUBE
  OTHER
}

enum Role {
  User
  Admin
}
